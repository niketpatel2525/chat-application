Socket {
  nsp:
   Namespace {
     name: '/',
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Circular],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     sockets:
      { jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     connected:
      { jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     fns: [],
     ids: 0,
     rooms: [],
     flags: {},
     adapter:
      Adapter {
        nsp: [Circular],
        rooms: [Object],
        sids: [Object],
        encoder: Encoder {} },
     _events: { connection: [Function] },
     _eventsCount: 1 },
  server:
   Server {
     nsps: { '/': [Object] },
     _path: '/socket.io',
     _serveClient: true,
     parser:
      { protocol: 4,
        types: [Array],
        CONNECT: 0,
        DISCONNECT: 1,
        EVENT: 2,
        ACK: 3,
        ERROR: 4,
        BINARY_EVENT: 5,
        BINARY_ACK: 6,
        Encoder: [Function: Encoder],
        Decoder: [Function: Decoder] },
     encoder: Encoder {},
     _adapter: [Function: Adapter],
     _origins: '*:*',
     sockets:
      Namespace {
        name: '/',
        server: [Circular],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Object],
        _events: [Object],
        _eventsCount: 1 },
     eio:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     httpServer:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 3,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:0.0.0.0:3000',
        [Symbol(asyncId)]: 7 },
     engine:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 } },
  adapter:
   Adapter {
     nsp:
      Namespace {
        name: '/',
        server: [Object],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Circular],
        _events: [Object],
        _eventsCount: 1 },
     rooms:
      { '1000': [Object],
        jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     sids:
      { jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     encoder: Encoder {} },
  id: 'P3yaBDSVOI2kh2aAAAAA',
  client:
   Client {
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     conn:
      Socket {
        id: 'P3yaBDSVOI2kh2aAAAAA',
        server: [Object],
        upgrading: false,
        upgraded: true,
        readyState: 'closed',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [],
        cleanupFn: [],
        request: [Object],
        remoteAddress: '127.0.0.1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: [Object],
        transport: [Object],
        _events: {},
        _eventsCount: 0 },
     encoder: Encoder {},
     decoder: Decoder { reconstructor: null, _callbacks: [Object] },
     id: 'P3yaBDSVOI2kh2aAAAAA',
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=M8b2a_I',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
        read: [Function] },
     onclose: [Function: bound ],
     ondata: [Function: bound ],
     onerror: [Function: bound ],
     ondecoded: [Function: bound ],
     sockets: {},
     nsps: {},
     connectBuffer: [] },
  conn:
   Socket {
     id: 'P3yaBDSVOI2kh2aAAAAA',
     server:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     upgrading: false,
     upgraded: true,
     readyState: 'closed',
     writeBuffer: [],
     packetsFn: [],
     sentCallbackFn: [],
     cleanupFn: [],
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=M8b2a_I',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
        read: [Function] },
     remoteAddress: '127.0.0.1',
     checkIntervalTimer: null,
     upgradeTimeoutTimer: null,
     pingTimeoutTimer:
      Timeout {
        '0': null,
        _called: false,
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 890,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(asyncId)]: 86,
        [Symbol(triggerAsyncId)]: 0 },
     transport:
      WebSocket {
        readyState: 'closed',
        discarded: false,
        socket: [Object],
        writable: true,
        perMessageDeflate: [Object],
        supportsBinary: true,
        _events: [Object],
        _eventsCount: 1 },
     _events: {},
     _eventsCount: 0 },
  rooms: {},
  acks: {},
  connected: false,
  disconnected: true,
  handshake:
   { headers:
      { host: 'localhost:3000',
        connection: 'keep-alive',
        accept: '*/*',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',
        referer: 'http://localhost:3000/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',
        cookie: '_xsrf=2|17c5428c|5645bab13096e9eff084ae83f060a73b|1519943376; username-localhost-8888="2|1:0|10:1520606483|23:username-localhost-8888|44:ODQzMjBkNmZjMDA4NDhmNjgzMzVkMjkwZWU3NTAxOGE=|8f2d96c7679a2a2f30ed5be60ce5fedb45f607c45c93c0566bce2d8275de43b7"; io=cCwNj8W8gY9UMnrsAAAD' },
     time: 'Wed Mar 14 2018 10:04:17 GMT-0500 (Central Daylight Time)',
     address: '127.0.0.1',
     xdomain: false,
     secure: false,
     issued: 1521039857089,
     url: '/socket.io/?EIO=3&transport=polling&t=M8b2a_I',
     query: { EIO: '3', transport: 'polling', t: 'M8b2a_I' } },
  fns: [],
  flags: {},
  _rooms: [],
  _events:
   { '$stream': [Function],
     '$stream-read': [Function],
     '$stream-write': [Function],
     '$stream-end': [Function],
     '$stream-error': [Function],
     error: [Function],
     disconnect: [ [Function], [Function] ],
     'add user': [Function],
     'new message': [Function],
     typing: [Function],
     'stop typing': [Function] },
  _eventsCount: 11,
  _streamSocket:
   Socket {
     domain: null,
     _events: { file: [Object] },
     _eventsCount: 1,
     _maxListeners: undefined,
     sio: [Circular],
     forceBase64: false,
     streams: {},
     encoder:
      Encoder {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined },
     decoder:
      Decoder {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined } },
  numusers: NaN }
Socket {
  nsp:
   Namespace {
     name: '/',
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Circular],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     sockets:
      { jia32OrPAKneQ_pdAAAB: [Circular],
        Apso2HIzXgQDESpAAAAC: [Object] },
     connected:
      { jia32OrPAKneQ_pdAAAB: [Circular],
        Apso2HIzXgQDESpAAAAC: [Object] },
     fns: [],
     ids: 0,
     rooms: [],
     flags: {},
     adapter:
      Adapter {
        nsp: [Circular],
        rooms: [Object],
        sids: [Object],
        encoder: Encoder {} },
     _events: { connection: [Function] },
     _eventsCount: 1 },
  server:
   Server {
     nsps: { '/': [Object] },
     _path: '/socket.io',
     _serveClient: true,
     parser:
      { protocol: 4,
        types: [Array],
        CONNECT: 0,
        DISCONNECT: 1,
        EVENT: 2,
        ACK: 3,
        ERROR: 4,
        BINARY_EVENT: 5,
        BINARY_ACK: 6,
        Encoder: [Function: Encoder],
        Decoder: [Function: Decoder] },
     encoder: Encoder {},
     _adapter: [Function: Adapter],
     _origins: '*:*',
     sockets:
      Namespace {
        name: '/',
        server: [Circular],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Object],
        _events: [Object],
        _eventsCount: 1 },
     eio:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     httpServer:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 3,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:0.0.0.0:3000',
        [Symbol(asyncId)]: 7 },
     engine:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 } },
  adapter:
   Adapter {
     nsp:
      Namespace {
        name: '/',
        server: [Object],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Circular],
        _events: [Object],
        _eventsCount: 1 },
     rooms:
      { '1000': [Object],
        jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     sids:
      { jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     encoder: Encoder {} },
  id: 'jia32OrPAKneQ_pdAAAB',
  client:
   Client {
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     conn:
      Socket {
        id: 'jia32OrPAKneQ_pdAAAB',
        server: [Object],
        upgrading: false,
        upgraded: true,
        readyState: 'open',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [],
        cleanupFn: [Array],
        request: [Object],
        remoteAddress: '127.0.0.1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: [Object],
        transport: [Object],
        _events: [Object],
        _eventsCount: 3 },
     encoder: Encoder {},
     decoder: Decoder { reconstructor: null, _callbacks: [Object] },
     id: 'jia32OrPAKneQ_pdAAAB',
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=M8b2bEv',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
        read: [Function] },
     onclose: [Function: bound ],
     ondata: [Function: bound ],
     onerror: [Function: bound ],
     ondecoded: [Function: bound ],
     sockets: { jia32OrPAKneQ_pdAAAB: [Circular] },
     nsps: { '/': [Circular] },
     connectBuffer: [] },
  conn:
   Socket {
     id: 'jia32OrPAKneQ_pdAAAB',
     server:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     upgrading: false,
     upgraded: true,
     readyState: 'open',
     writeBuffer: [],
     packetsFn: [],
     sentCallbackFn: [],
     cleanupFn: [ [Function], [Function] ],
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=M8b2bEv',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
        read: [Function] },
     remoteAddress: '127.0.0.1',
     checkIntervalTimer: null,
     upgradeTimeoutTimer: null,
     pingTimeoutTimer:
      Timeout {
        _called: false,
        _idleTimeout: 85000,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 25951,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(asyncId)]: 184,
        [Symbol(triggerAsyncId)]: 0 },
     transport:
      WebSocket {
        readyState: 'open',
        discarded: false,
        socket: [Object],
        writable: true,
        perMessageDeflate: [Object],
        supportsBinary: true,
        _events: [Object],
        _eventsCount: 4 },
     _events:
      { close: [Array],
        data: [Function: bound ],
        error: [Function: bound ] },
     _eventsCount: 3 },
  rooms: { jia32OrPAKneQ_pdAAAB: 'jia32OrPAKneQ_pdAAAB' },
  acks: {},
  connected: true,
  disconnected: false,
  handshake:
   { headers:
      { host: 'localhost:3000',
        connection: 'keep-alive',
        accept: '*/*',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',
        referer: 'http://localhost:3000/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',
        cookie: '_xsrf=2|17c5428c|5645bab13096e9eff084ae83f060a73b|1519943376; username-localhost-8888="2|1:0|10:1520606483|23:username-localhost-8888|44:ODQzMjBkNmZjMDA4NDhmNjgzMzVkMjkwZWU3NTAxOGE=|8f2d96c7679a2a2f30ed5be60ce5fedb45f607c45c93c0566bce2d8275de43b7"; io=cCwNj8W8gY9UMnrsAAAD' },
     time: 'Wed Mar 14 2018 10:04:17 GMT-0500 (Central Daylight Time)',
     address: '127.0.0.1',
     xdomain: false,
     secure: false,
     issued: 1521039857095,
     url: '/socket.io/?EIO=3&transport=polling&t=M8b2bEv',
     query: { EIO: '3', transport: 'polling', t: 'M8b2bEv' } },
  fns: [],
  flags: {},
  _rooms: [],
  _events:
   { '$stream': [Function],
     '$stream-read': [Function],
     '$stream-write': [Function],
     '$stream-end': [Function],
     '$stream-error': [Function],
     error: [Function],
     disconnect: [ [Function], [Function] ],
     'add user': [Function],
     'new message': [Function],
     typing: [Function],
     'stop typing': [Function] },
  _eventsCount: 11,
  _streamSocket:
   Socket {
     domain: null,
     _events: { file: [Object] },
     _eventsCount: 1,
     _maxListeners: undefined,
     sio: [Circular],
     forceBase64: false,
     streams: {},
     encoder:
      Encoder {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined },
     decoder:
      Decoder {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined } } }
Socket {
  nsp:
   Namespace {
     name: '/',
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Circular],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     sockets:
      { jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Circular] },
     connected:
      { jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Circular] },
     fns: [],
     ids: 0,
     rooms: [],
     flags: {},
     adapter:
      Adapter {
        nsp: [Circular],
        rooms: [Object],
        sids: [Object],
        encoder: Encoder {} },
     _events: { connection: [Function] },
     _eventsCount: 1 },
  server:
   Server {
     nsps: { '/': [Object] },
     _path: '/socket.io',
     _serveClient: true,
     parser:
      { protocol: 4,
        types: [Array],
        CONNECT: 0,
        DISCONNECT: 1,
        EVENT: 2,
        ACK: 3,
        ERROR: 4,
        BINARY_EVENT: 5,
        BINARY_ACK: 6,
        Encoder: [Function: Encoder],
        Decoder: [Function: Decoder] },
     encoder: Encoder {},
     _adapter: [Function: Adapter],
     _origins: '*:*',
     sockets:
      Namespace {
        name: '/',
        server: [Circular],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Object],
        _events: [Object],
        _eventsCount: 1 },
     eio:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     httpServer:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 3,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:0.0.0.0:3000',
        [Symbol(asyncId)]: 7 },
     engine:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 } },
  adapter:
   Adapter {
     nsp:
      Namespace {
        name: '/',
        server: [Object],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Circular],
        _events: [Object],
        _eventsCount: 1 },
     rooms:
      { '1000': [Object],
        jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     sids:
      { jia32OrPAKneQ_pdAAAB: [Object],
        Apso2HIzXgQDESpAAAAC: [Object] },
     encoder: Encoder {} },
  id: 'Apso2HIzXgQDESpAAAAC',
  client:
   Client {
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     conn:
      Socket {
        id: 'Apso2HIzXgQDESpAAAAC',
        server: [Object],
        upgrading: false,
        upgraded: true,
        readyState: 'open',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [],
        cleanupFn: [Array],
        request: [Object],
        remoteAddress: '127.0.0.1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: [Object],
        transport: [Object],
        _events: [Object],
        _eventsCount: 3 },
     encoder: Encoder {},
     decoder: Decoder { reconstructor: null, _callbacks: [Object] },
     id: 'Apso2HIzXgQDESpAAAAC',
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=M8b2cXX',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
        read: [Function] },
     onclose: [Function: bound ],
     ondata: [Function: bound ],
     onerror: [Function: bound ],
     ondecoded: [Function: bound ],
     sockets: { Apso2HIzXgQDESpAAAAC: [Circular] },
     nsps: { '/': [Circular] },
     connectBuffer: [] },
  conn:
   Socket {
     id: 'Apso2HIzXgQDESpAAAAC',
     server:
      Server {
        clients: [Object],
        clientsCount: 2,
        wsEngine: 'uws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     upgrading: false,
     upgraded: true,
     readyState: 'open',
     writeBuffer: [],
     packetsFn: [],
     sentCallbackFn: [],
     cleanupFn: [ [Function], [Function] ],
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?EIO=3&transport=polling&t=M8b2cXX',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
        read: [Function] },
     remoteAddress: '127.0.0.1',
     checkIntervalTimer: null,
     upgradeTimeoutTimer: null,
     pingTimeoutTimer:
      Timeout {
        _called: false,
        _idleTimeout: 85000,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 30270,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(asyncId)]: 196,
        [Symbol(triggerAsyncId)]: 0 },
     transport:
      WebSocket {
        readyState: 'open',
        discarded: false,
        socket: [Object],
        writable: false,
        perMessageDeflate: [Object],
        supportsBinary: true,
        _events: [Object],
        _eventsCount: 4 },
     _events:
      { close: [Array],
        data: [Function: bound ],
        error: [Function: bound ] },
     _eventsCount: 3 },
  rooms: { '1000': '1000', Apso2HIzXgQDESpAAAAC: 'Apso2HIzXgQDESpAAAAC' },
  acks: {},
  connected: true,
  disconnected: false,
  handshake:
   { headers:
      { host: 'localhost:3000',
        connection: 'keep-alive',
        accept: '*/*',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',
        referer: 'http://localhost:3000/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',
        cookie: '_xsrf=2|17c5428c|5645bab13096e9eff084ae83f060a73b|1519943376; username-localhost-8888="2|1:0|10:1520606483|23:username-localhost-8888|44:ODQzMjBkNmZjMDA4NDhmNjgzMzVkMjkwZWU3NTAxOGE=|8f2d96c7679a2a2f30ed5be60ce5fedb45f607c45c93c0566bce2d8275de43b7"; io=jia32OrPAKneQ_pdAAAB' },
     time: 'Wed Mar 14 2018 10:04:21 GMT-0500 (Central Daylight Time)',
     address: '127.0.0.1',
     xdomain: false,
     secure: false,
     issued: 1521039861863,
     url: '/socket.io/?EIO=3&transport=polling&t=M8b2cXX',
     query: { EIO: '3', transport: 'polling', t: 'M8b2cXX' } },
  fns: [],
  flags: {},
  _rooms: [],
  _events:
   { '$stream': [Function],
     '$stream-read': [Function],
     '$stream-write': [Function],
     '$stream-end': [Function],
     '$stream-error': [Function],
     error: [Function],
     disconnect: [ [Function], [Function] ],
     'add user': [Function],
     'new message': [Function],
     typing: [Function],
     'stop typing': [Function] },
  _eventsCount: 11,
  _streamSocket:
   Socket {
     domain: null,
     _events: { file: [Object] },
     _eventsCount: 1,
     _maxListeners: undefined,
     sio: [Circular],
     forceBase64: false,
     streams: {},
     encoder:
      Encoder {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined },
     decoder:
      Decoder {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined } },
  username: 'Niket',
  room: '1000',
  numusers: 1 }
